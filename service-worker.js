const CACHE_NAME = "study-library-cache-v1"; // ‡§Ö‡§™‡§®‡•á Cache ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡•á‡§Ç
const urlsToCache = [
    "/", // ‡§π‡•ã‡§Æ‡§™‡•á‡§ú
    "/index.html",
    "/style.css",
    "/script.js",
    "/images/logo.png",
    "/offline.html" // ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è
];

// üîπ Install Event (‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§ï‡•ã ‡§ï‡•à‡§∂ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§ó‡§æ)
self.addEventListener("install", event => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                console.log("Opened cache");
                return cache.addAll(urlsToCache);
            })
    );
});

// üîπ Activate Event (‡§™‡•Å‡§∞‡§æ‡§®‡•á Cache ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§ó‡§æ)
self.addEventListener("activate", event => {
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cache => {
                    if (cache !== CACHE_NAME) {
                        console.log("Deleting old cache:", cache);
                        return caches.delete(cache);
                    }
                })
            );
        })
    );
});

// üîπ Fetch Event (‡§ï‡•à‡§∂ ‡§∏‡•á ‡§´‡§æ‡§á‡§≤ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§ó‡§æ ‡§Ø‡§æ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§∏‡•á ‡§≤‡§æ‡§è‡§ó‡§æ)
self.addEventListener("fetch", event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                return response || fetch(event.request);
            })
            .catch(() => caches.match("/offline.html")) // ‡§Ö‡§ó‡§∞ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã Offline Page ‡§¶‡§ø‡§ñ‡§æ‡§è‡§ó‡§æ
    );
});
